{"version":3,"file":"belfiore-connector.bundle.min.js","sources":["../src/classes/belfiore-connector.class.ts"],"sourcesContent":["import moment, { Moment } from \"moment\";\r\nimport BelfioreConnectorConfig from \"../types/belfiore-connector-config.type\";\r\nimport {\r\n\tBelfioreAbstractConnector,\r\n\tBelfiorePlace,\r\n\tMultiFormatDate,\r\n} from \"@marketto/belfiore-connector\";\r\n\r\n/**\r\n * Handler for cities and countries Dataset\r\n */\r\nexport default class BelfioreConnector extends BelfioreAbstractConnector {\r\n\tprivate placesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\tprivate placesCache?: readonly BelfiorePlace[];\r\n\tprivate placeExpirationDateTime?: Date;\r\n\tprivate lifeTimeSec?: number;\r\n\tprivate toDate: Moment | undefined;\r\n\tprivate fromDate: Moment | undefined;\r\n\tprivate codeMatcher: RegExp | undefined;\r\n\tprivate province: string | undefined;\r\n\r\n\tprivate filterByParams(\r\n\t\tplaces: BelfiorePlace[],\r\n\t\tparams?: {\r\n\t\t\ttoDate?: Moment | undefined;\r\n\t\t\tfromDate?: Moment | undefined;\r\n\t\t\tcodeMatcher?: RegExp | undefined;\r\n\t\t\tprovince?: string | undefined;\r\n\t\t}\r\n\t): BelfiorePlace[] {\r\n\t\tlet filteredPlaces = [...places];\r\n\t\t// Code Matcher\r\n\t\tif (params?.codeMatcher) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(({ belfioreCode }) =>\r\n\t\t\t\tparams?.codeMatcher?.test(belfioreCode)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Province\r\n\t\tif (params?.province) {\r\n\t\t\tconst ucProvince = params?.province?.toUpperCase();\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ province }) => ucProvince === province?.toUpperCase()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Foundation Date\r\n\t\tif (params?.fromDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ creationDate }) =>\r\n\t\t\t\t\t!creationDate || params?.fromDate?.isSameOrAfter(creationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Expiration Date\r\n\t\tif (params?.toDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ expirationDate }) =>\r\n\t\t\t\t\t!expirationDate ||\r\n\t\t\t\t\tparams?.toDate?.isSameOrBefore(expirationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn filteredPlaces;\r\n\t}\r\n\r\n\tprivate async getPlaces(): Promise<BelfiorePlace[]> {\r\n\t\tif (\r\n\t\t\ttypeof this.placesRetrieverFn === \"function\" &&\r\n\t\t\t((this.placeExpirationDateTime instanceof Date &&\r\n\t\t\t\tnew Date().getTime() - this.placeExpirationDateTime.getTime() >= 0) ||\r\n\t\t\t\t!this.placesCache)\r\n\t\t) {\r\n\t\t\tconst allPlaces = await this.placesRetrieverFn();\r\n\t\t\tif (typeof this.lifeTimeSec === \"number\" && !isNaN(this.lifeTimeSec)) {\r\n\t\t\t\tthis.placeExpirationDateTime = moment()\r\n\t\t\t\t\t.add(this.lifeTimeSec, \"seconds\")\r\n\t\t\t\t\t.toDate();\r\n\t\t\t}\r\n\r\n\t\t\tconst filteredPlaces = this.filterByParams(allPlaces, {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\r\n\t\treturn [...(this.placesCache || [])];\r\n\t}\r\n\r\n\tprivate async parseProvinces(): Promise<string[]> {\r\n\t\tconst places = await this.getPlaces();\r\n\t\treturn [...new Set(places.map(({ province }) => province))]\r\n\t\t\t.sort()\r\n\t\t\t.filter(Boolean) as string[];\r\n\t}\r\n\r\n\tconstructor(\r\n\t\toptions: BelfioreConnectorConfig &\r\n\t\t\t(\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t\t  }\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn?: never | undefined;\r\n\t\t\t\t\t\tplacesCache: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: never | undefined;\r\n\t\t\t\t\t\tlifeTimeSec?: never | undefined;\r\n\t\t\t\t  }\r\n\t\t\t)\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrRetrieverFn: BelfiorePlace[] | (() => Promise<BelfiorePlace[]>),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrFnOrOptions:\r\n\t\t\t| BelfiorePlace[]\r\n\t\t\t| (() => Promise<BelfiorePlace[]>)\r\n\t\t\t| (BelfioreConnectorConfig & {\r\n\t\t\t\t\tplacesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t  }),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t) {\r\n\t\tsuper();\r\n\t\tif (options?.codeMatcher && options?.province) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Both codeMatcher and province were provided to Bolfiore, only one is allowed\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (options?.toDate && !options?.fromDate) {\r\n\t\t\tthrow new Error(\"Parameter fromDate is mandatory passing toDate\");\r\n\t\t}\r\n\r\n\t\tlet placesCache: BelfiorePlace[] | readonly BelfiorePlace[] | undefined =\r\n\t\t\tundefined;\r\n\r\n\t\tif (typeof placesOrFnOrOptions === \"function\") {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions;\r\n\t\t\tthis.lifeTimeSec = options?.lifeTimeSec;\r\n\t\t} else if (Array.isArray(placesOrFnOrOptions)) {\r\n\t\t\tplacesCache = placesOrFnOrOptions;\r\n\t\t} else if (\r\n\t\t\ttypeof placesOrFnOrOptions === \"object\" &&\r\n\t\t\t(placesOrFnOrOptions.placesRetrieverFn || placesOrFnOrOptions.placesCache)\r\n\t\t) {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions.placesRetrieverFn;\r\n\t\t\tplacesCache = placesOrFnOrOptions.placesCache;\r\n\t\t\tthis.placeExpirationDateTime =\r\n\t\t\t\tplacesOrFnOrOptions.placeExpirationDateTime;\r\n\t\t\tthis.lifeTimeSec = placesOrFnOrOptions.lifeTimeSec;\r\n\t\t\tthis.toDate = placesOrFnOrOptions.toDate;\r\n\t\t\tthis.fromDate = placesOrFnOrOptions.fromDate;\r\n\t\t\tthis.codeMatcher = placesOrFnOrOptions.codeMatcher;\r\n\t\t\tthis.province = placesOrFnOrOptions.province;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Invalid initialized, retriver functio, array of places or BelfioreConnector instance needed as first parameter\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.fromDate = this.fromDate || options?.fromDate;\r\n\t\tthis.toDate = this.toDate || options?.toDate;\r\n\t\tthis.codeMatcher = this.codeMatcher || options?.codeMatcher;\r\n\t\tthis.province = this.province || options?.province;\r\n\r\n\t\tif (placesCache) {\r\n\t\t\tconst filteredPlaces = this.filterByParams([...placesCache], {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return belfiore places list\r\n\t */\r\n\tpublic async toArray(): Promise<BelfiorePlace[]> {\r\n\t\treturn (await this.getPlaces()).map((place) => ({\r\n\t\t\t...place,\r\n\t\t})) as BelfiorePlace[];\r\n\t}\r\n\r\n\tpublic get provinces(): Promise<string[]> {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tif (this.province) {\r\n\t\t\t\tresolve([this.province]);\r\n\t\t\t} else if (this.codeMatcher !== this.COUNTRY_CODE_MATCHER) {\r\n\t\t\t\tthis.parseProvinces().then(resolve);\r\n\t\t\t} else {\r\n\t\t\t\tresolve([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @description Search places matching given name\r\n\t */\r\n\tpublic async searchByName(name: string): Promise<BelfiorePlace[] | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(name, \"i\");\r\n\r\n\t\treturn (await this.getPlaces()).filter((place) =>\r\n\t\t\tnameMatcher.test(place.name)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Find place matching given name, retuns place object if provided name match only 1 result\r\n\t */\r\n\tpublic async findByName(name: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(`^${name}$`, \"i\");\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find((place) => nameMatcher.test(place.name)) ||\r\n\t\t\tnull\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Retrieve Place by Belfiore Code\r\n\t */\r\n\tpublic async findByCode(belfioreCode: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!this.BELFIORE_CODE_MATCHER.test(belfioreCode)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst lcBelfioreCode = belfioreCode.toUpperCase();\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find(\r\n\t\t\t\t(place) => lcBelfioreCode === place?.belfioreCode?.toUpperCase()\r\n\t\t\t) || null\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic active = (date: MultiFormatDate = moment()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: moment(date),\r\n\t\t\ttoDate: moment(date),\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date ahead\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic from = (date: MultiFormatDate = moment()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: moment(date),\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Belfiore instance filtered by the given province\r\n\t * @param code Province Code (2 A-Z char)\r\n\t * @returns Belfiore instance filtered by province code\r\n\t * @public\r\n\t */\r\n\tpublic byProvince = (code: string): BelfioreConnector | undefined => {\r\n\t\tif (typeof code !== \"string\" || !/^[A-Z]{2}$/u.test(code)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: undefined,\r\n\t\t\tprovince: code,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get cities(): BelfioreConnector | undefined {\r\n\t\tif (this.codeMatcher && this.codeMatcher !== this.CITY_CODE_MATCHER) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.CITY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get countries(): BelfioreConnector | undefined {\r\n\t\tif (\r\n\t\t\t(this.codeMatcher && this.codeMatcher !== this.COUNTRY_CODE_MATCHER) ||\r\n\t\t\tthis.province\r\n\t\t) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.COUNTRY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n}\r\n"],"names":["BelfioreConnector","BelfioreAbstractConnector","filterByParams","places","params","filteredPlaces","codeMatcher","filter","belfioreCode","_a","test","province","ucProvince","toUpperCase","fromDate","creationDate","isSameOrAfter","toDate","expirationDate","isSameOrBefore","getPlaces","this","placesRetrieverFn","placeExpirationDateTime","Date","getTime","placesCache","allPlaces","lifeTimeSec","isNaN","moment","add","Object","freeze","parseProvinces","Set","map","sort","Boolean","constructor","placesOrFnOrOptions","options","super","active","date","from","byProvince","code","undefined","Error","Array","isArray","toArray","place","provinces","Promise","resolve","COUNTRY_CODE_MATCHER","then","searchByName","name","nameMatcher","RegExp","findByName","find","findByCode","BELFIORE_CODE_MATCHER","lcBelfioreCode","cities","CITY_CODE_MATCHER","countries"],"mappings":"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"}