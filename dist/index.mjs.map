{"version":3,"file":"index.mjs","sources":["../src/classes/belfiore-connector.class.ts"],"sourcesContent":["import dayjs from \"dayjs\";\r\nimport BelfioreConnectorConfig from \"../types/belfiore-connector-config.type\";\r\nimport {\r\n\tBelfioreAbstractConnector,\r\n\tBelfiorePlace,\r\n\tMultiFormatDate,\r\n} from \"@marketto/belfiore-connector\";\r\n\r\n/**\r\n * Handler for cities and countries Dataset\r\n */\r\nexport default class BelfioreConnector extends BelfioreAbstractConnector {\r\n\tprivate placesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\tprivate placesCache?: readonly BelfiorePlace[];\r\n\tprivate placeExpirationDateTime?: Date;\r\n\tprivate lifeTimeSec?: number;\r\n\tprivate toDate: Date | undefined;\r\n\tprivate fromDate: Date | undefined;\r\n\tprivate codeMatcher: RegExp | undefined;\r\n\tprivate province: string | undefined;\r\n\r\n\tprivate filterByParams(\r\n\t\tplaces: BelfiorePlace[],\r\n\t\tparams?: {\r\n\t\t\ttoDate?: Date | undefined;\r\n\t\t\tfromDate?: Date | undefined;\r\n\t\t\tcodeMatcher?: RegExp | undefined;\r\n\t\t\tprovince?: string | undefined;\r\n\t\t}\r\n\t): BelfiorePlace[] {\r\n\t\tlet filteredPlaces = [...places];\r\n\t\t// Code Matcher\r\n\t\tif (params?.codeMatcher) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(({ belfioreCode }) =>\r\n\t\t\t\tparams?.codeMatcher?.test(belfioreCode)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Province\r\n\t\tif (params?.province) {\r\n\t\t\tconst ucProvince = params?.province?.toUpperCase();\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ province }) => ucProvince === province?.toUpperCase()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Foundation Date\r\n\t\tif (params?.fromDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ creationDate }) =>\r\n\t\t\t\t\t!creationDate || !dayjs(params.fromDate).isBefore(creationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Expiration Date\r\n\t\tif (params?.toDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ expirationDate }) =>\r\n\t\t\t\t\t!expirationDate ||\r\n\t\t\t\t\t!dayjs(params.toDate).isBefore(expirationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn filteredPlaces;\r\n\t}\r\n\r\n\tprivate async getPlaces(): Promise<BelfiorePlace[]> {\r\n\t\tif (\r\n\t\t\ttypeof this.placesRetrieverFn === \"function\" &&\r\n\t\t\t((this.placeExpirationDateTime instanceof Date &&\r\n\t\t\t\tnew Date().getTime() - this.placeExpirationDateTime.getTime() >= 0) ||\r\n\t\t\t\t!this.placesCache)\r\n\t\t) {\r\n\t\t\tconst allPlaces = await this.placesRetrieverFn();\r\n\t\t\tif (typeof this.lifeTimeSec === \"number\" && !isNaN(this.lifeTimeSec)) {\r\n\t\t\t\tthis.placeExpirationDateTime = dayjs()\r\n\t\t\t\t\t.add(this.lifeTimeSec, \"seconds\")\r\n\t\t\t\t\t.toDate();\r\n\t\t\t}\r\n\r\n\t\t\tconst filteredPlaces = this.filterByParams(allPlaces, {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\r\n\t\treturn [...(this.placesCache || [])];\r\n\t}\r\n\r\n\tprivate async parseProvinces(): Promise<string[]> {\r\n\t\tconst places = await this.getPlaces();\r\n\t\treturn [...new Set(places.map(({ province }) => province))]\r\n\t\t\t.sort()\r\n\t\t\t.filter(Boolean) as string[];\r\n\t}\r\n\r\n\tconstructor(\r\n\t\toptions: BelfioreConnectorConfig &\r\n\t\t\t(\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t\t  }\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn?: never | undefined;\r\n\t\t\t\t\t\tplacesCache: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: never | undefined;\r\n\t\t\t\t\t\tlifeTimeSec?: never | undefined;\r\n\t\t\t\t  }\r\n\t\t\t)\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrRetrieverFn: BelfiorePlace[] | (() => Promise<BelfiorePlace[]>),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrFnOrOptions:\r\n\t\t\t| BelfiorePlace[]\r\n\t\t\t| (() => Promise<BelfiorePlace[]>)\r\n\t\t\t| (BelfioreConnectorConfig & {\r\n\t\t\t\t\tplacesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t  }),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t) {\r\n\t\tsuper();\r\n\t\tif (options?.codeMatcher && options?.province) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Both codeMatcher and province were provided to Bolfiore, only one is allowed\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (options?.toDate && !options?.fromDate) {\r\n\t\t\tthrow new Error(\"Parameter fromDate is mandatory passing toDate\");\r\n\t\t}\r\n\r\n\t\tlet placesCache: BelfiorePlace[] | readonly BelfiorePlace[] | undefined =\r\n\t\t\tundefined;\r\n\r\n\t\tif (typeof placesOrFnOrOptions === \"function\") {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions;\r\n\t\t\tthis.lifeTimeSec = options?.lifeTimeSec;\r\n\t\t} else if (Array.isArray(placesOrFnOrOptions)) {\r\n\t\t\tplacesCache = placesOrFnOrOptions;\r\n\t\t} else if (\r\n\t\t\ttypeof placesOrFnOrOptions === \"object\" &&\r\n\t\t\t(placesOrFnOrOptions.placesRetrieverFn || placesOrFnOrOptions.placesCache)\r\n\t\t) {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions.placesRetrieverFn;\r\n\t\t\tplacesCache = placesOrFnOrOptions.placesCache;\r\n\t\t\tthis.placeExpirationDateTime =\r\n\t\t\t\tplacesOrFnOrOptions.placeExpirationDateTime;\r\n\t\t\tthis.lifeTimeSec = placesOrFnOrOptions.lifeTimeSec;\r\n\t\t\tthis.toDate = placesOrFnOrOptions.toDate;\r\n\t\t\tthis.fromDate = placesOrFnOrOptions.fromDate;\r\n\t\t\tthis.codeMatcher = placesOrFnOrOptions.codeMatcher;\r\n\t\t\tthis.province = placesOrFnOrOptions.province;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Invalid initialized, retriver functio, array of places or BelfioreConnector instance needed as first parameter\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.fromDate = this.fromDate || options?.fromDate;\r\n\t\tthis.toDate = this.toDate || options?.toDate;\r\n\t\tthis.codeMatcher = this.codeMatcher || options?.codeMatcher;\r\n\t\tthis.province = this.province || options?.province;\r\n\r\n\t\tif (placesCache) {\r\n\t\t\tconst filteredPlaces = this.filterByParams([...placesCache], {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return belfiore places list\r\n\t */\r\n\tpublic async toArray(): Promise<BelfiorePlace[]> {\r\n\t\treturn (await this.getPlaces()).map((place) => ({\r\n\t\t\t...place,\r\n\t\t})) as BelfiorePlace[];\r\n\t}\r\n\r\n\tpublic get provinces(): Promise<string[]> {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tif (this.province) {\r\n\t\t\t\tresolve([this.province]);\r\n\t\t\t} else if (this.codeMatcher !== this.COUNTRY_CODE_MATCHER) {\r\n\t\t\t\tthis.parseProvinces().then(resolve);\r\n\t\t\t} else {\r\n\t\t\t\tresolve([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @description Search places matching given name\r\n\t */\r\n\tpublic async searchByName(name: string): Promise<BelfiorePlace[] | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(name, \"i\");\r\n\r\n\t\treturn (await this.getPlaces()).filter((place) =>\r\n\t\t\tnameMatcher.test(place.name)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Find place matching given name, retuns place object if provided name match only 1 result\r\n\t */\r\n\tpublic async findByName(name: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(`^${name}$`, \"i\");\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find((place) => nameMatcher.test(place.name)) ||\r\n\t\t\tnull\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Retrieve Place by Belfiore Code\r\n\t */\r\n\tpublic async findByCode(belfioreCode: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!this.BELFIORE_CODE_MATCHER.test(belfioreCode)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst lcBelfioreCode = belfioreCode.toUpperCase();\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find(\r\n\t\t\t\t(place) => lcBelfioreCode === place?.belfioreCode?.toUpperCase()\r\n\t\t\t) || null\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic active = (date: MultiFormatDate = new Date()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: Array.isArray(date)\r\n\t\t\t\t? new Date(date[0], date[1] ?? 0, date[2] ?? 1)\r\n\t\t\t\t: dayjs(date).toDate(),\r\n\t\t\ttoDate: Array.isArray(date)\r\n\t\t\t\t? new Date(date[0], date[1] ?? 0, date[2] ?? 1)\r\n\t\t\t\t: dayjs(date).toDate(),\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date ahead\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic from = (date: MultiFormatDate = new Date()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: Array.isArray(date)\r\n\t\t\t\t? new Date(date[0], date[1] ?? 0, date[2] ?? 1)\r\n\t\t\t\t: dayjs(date).toDate(),\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Belfiore instance filtered by the given province\r\n\t * @param code Province Code (2 A-Z char)\r\n\t * @returns Belfiore instance filtered by province code\r\n\t * @public\r\n\t */\r\n\tpublic byProvince = (code: string): BelfioreConnector | undefined => {\r\n\t\tif (typeof code !== \"string\" || !/^[A-Z]{2}$/u.test(code)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: undefined,\r\n\t\t\tprovince: code,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get cities(): BelfioreConnector | undefined {\r\n\t\tif (this.codeMatcher && this.codeMatcher !== this.CITY_CODE_MATCHER) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.CITY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get countries(): BelfioreConnector | undefined {\r\n\t\tif (\r\n\t\t\t(this.codeMatcher && this.codeMatcher !== this.COUNTRY_CODE_MATCHER) ||\r\n\t\t\tthis.province\r\n\t\t) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.COUNTRY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n}\r\n"],"names":["BelfioreConnector","BelfioreAbstractConnector","placesRetrieverFn","placesCache","placeExpirationDateTime","lifeTimeSec","toDate","fromDate","codeMatcher","province","filterByParams","places","params","filteredPlaces","filter","belfioreCode","test","ucProvince","toUpperCase","creationDate","dayjs","isBefore","expirationDate","getPlaces","this","Date","getTime","allPlaces","isNaN","add","Object","freeze","parseProvinces","Set","map","sort","Boolean","constructor","placesOrFnOrOptions","options","super","Error","Array","isArray","toArray","place","provinces","Promise","resolve","COUNTRY_CODE_MATCHER","then","searchByName","name","nameMatcher","RegExp","findByName","find","findByCode","BELFIORE_CODE_MATCHER","lcBelfioreCode","active","date","from","byProvince","code","undefined","cities","CITY_CODE_MATCHER","countries"],"mappings":"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"}