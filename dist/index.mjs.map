{"version":3,"file":"index.mjs","sources":["../src/classes/belfiore-connector.class.ts"],"sourcesContent":["import moment, { Moment } from \"moment\";\r\nimport BelfioreConnectorConfig from \"../types/belfiore-connector-config.type\";\r\nimport {\r\n\tBelfioreAbstractConnector,\r\n\tBelfiorePlace,\r\n\tMultiFormatDate,\r\n} from \"@marketto/belfiore-connector\";\r\n\r\n/**\r\n * Handler for cities and countries Dataset\r\n */\r\nexport default class BelfioreConnector extends BelfioreAbstractConnector {\r\n\tprivate placesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\tprivate placesCache?: readonly BelfiorePlace[];\r\n\tprivate placeExpirationDateTime?: Date;\r\n\tprivate lifeTimeSec?: number;\r\n\tprivate toDate: Moment | undefined;\r\n\tprivate fromDate: Moment | undefined;\r\n\tprivate codeMatcher: RegExp | undefined;\r\n\tprivate province: string | undefined;\r\n\r\n\tprivate filterByParams(\r\n\t\tplaces: BelfiorePlace[],\r\n\t\tparams?: {\r\n\t\t\ttoDate?: Moment | undefined;\r\n\t\t\tfromDate?: Moment | undefined;\r\n\t\t\tcodeMatcher?: RegExp | undefined;\r\n\t\t\tprovince?: string | undefined;\r\n\t\t}\r\n\t): BelfiorePlace[] {\r\n\t\tlet filteredPlaces = [...places];\r\n\t\t// Code Matcher\r\n\t\tif (params?.codeMatcher) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(({ belfioreCode }) =>\r\n\t\t\t\tparams?.codeMatcher?.test(belfioreCode)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Province\r\n\t\tif (params?.province) {\r\n\t\t\tconst ucProvince = params?.province?.toUpperCase();\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ province }) => ucProvince === province?.toUpperCase()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Foundation Date\r\n\t\tif (params?.fromDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ creationDate }) =>\r\n\t\t\t\t\t!creationDate || params?.fromDate?.isSameOrAfter(creationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Expiration Date\r\n\t\tif (params?.toDate) {\r\n\t\t\tfilteredPlaces = filteredPlaces.filter(\r\n\t\t\t\t({ expirationDate }) =>\r\n\t\t\t\t\t!expirationDate ||\r\n\t\t\t\t\tparams?.toDate?.isSameOrBefore(expirationDate, \"day\")\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn filteredPlaces;\r\n\t}\r\n\r\n\tprivate async getPlaces(): Promise<BelfiorePlace[]> {\r\n\t\tif (\r\n\t\t\ttypeof this.placesRetrieverFn === \"function\" &&\r\n\t\t\t((this.placeExpirationDateTime instanceof Date &&\r\n\t\t\t\tnew Date().getTime() - this.placeExpirationDateTime.getTime() >= 0) ||\r\n\t\t\t\t!this.placesCache)\r\n\t\t) {\r\n\t\t\tconst allPlaces = await this.placesRetrieverFn();\r\n\t\t\tif (typeof this.lifeTimeSec === \"number\" && !isNaN(this.lifeTimeSec)) {\r\n\t\t\t\tthis.placeExpirationDateTime = moment()\r\n\t\t\t\t\t.add(this.lifeTimeSec, \"seconds\")\r\n\t\t\t\t\t.toDate();\r\n\t\t\t}\r\n\r\n\t\t\tconst filteredPlaces = this.filterByParams(allPlaces, {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\r\n\t\treturn [...(this.placesCache || [])];\r\n\t}\r\n\r\n\tprivate async parseProvinces(): Promise<string[]> {\r\n\t\tconst places = await this.getPlaces();\r\n\t\treturn [...new Set(places.map(({ province }) => province))]\r\n\t\t\t.sort()\r\n\t\t\t.filter(Boolean) as string[];\r\n\t}\r\n\r\n\tconstructor(\r\n\t\toptions: BelfioreConnectorConfig &\r\n\t\t\t(\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t\t  }\r\n\t\t\t\t| {\r\n\t\t\t\t\t\tplacesRetrieverFn?: never | undefined;\r\n\t\t\t\t\t\tplacesCache: readonly BelfiorePlace[];\r\n\t\t\t\t\t\tplaceExpirationDateTime?: never | undefined;\r\n\t\t\t\t\t\tlifeTimeSec?: never | undefined;\r\n\t\t\t\t  }\r\n\t\t\t)\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrRetrieverFn: BelfiorePlace[] | (() => Promise<BelfiorePlace[]>),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t);\r\n\tconstructor(\r\n\t\tplacesOrFnOrOptions:\r\n\t\t\t| BelfiorePlace[]\r\n\t\t\t| (() => Promise<BelfiorePlace[]>)\r\n\t\t\t| (BelfioreConnectorConfig & {\r\n\t\t\t\t\tplacesRetrieverFn?: () => Promise<BelfiorePlace[]>;\r\n\t\t\t\t\tplacesCache?: readonly BelfiorePlace[];\r\n\t\t\t\t\tplaceExpirationDateTime?: Date;\r\n\t\t\t\t\tlifeTimeSec?: number;\r\n\t\t\t  }),\r\n\t\toptions?: BelfioreConnectorConfig\r\n\t) {\r\n\t\tsuper();\r\n\t\tif (options?.codeMatcher && options?.province) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Both codeMatcher and province were provided to Bolfiore, only one is allowed\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (options?.toDate && !options?.fromDate) {\r\n\t\t\tthrow new Error(\"Parameter fromDate is mandatory passing toDate\");\r\n\t\t}\r\n\r\n\t\tlet placesCache: BelfiorePlace[] | readonly BelfiorePlace[] | undefined =\r\n\t\t\tundefined;\r\n\r\n\t\tif (typeof placesOrFnOrOptions === \"function\") {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions;\r\n\t\t\tthis.lifeTimeSec = options?.lifeTimeSec;\r\n\t\t} else if (Array.isArray(placesOrFnOrOptions)) {\r\n\t\t\tplacesCache = placesOrFnOrOptions;\r\n\t\t} else if (\r\n\t\t\ttypeof placesOrFnOrOptions === \"object\" &&\r\n\t\t\t(placesOrFnOrOptions.placesRetrieverFn || placesOrFnOrOptions.placesCache)\r\n\t\t) {\r\n\t\t\tthis.placesRetrieverFn = placesOrFnOrOptions.placesRetrieverFn;\r\n\t\t\tplacesCache = placesOrFnOrOptions.placesCache;\r\n\t\t\tthis.placeExpirationDateTime =\r\n\t\t\t\tplacesOrFnOrOptions.placeExpirationDateTime;\r\n\t\t\tthis.lifeTimeSec = placesOrFnOrOptions.lifeTimeSec;\r\n\t\t\tthis.toDate = placesOrFnOrOptions.toDate;\r\n\t\t\tthis.fromDate = placesOrFnOrOptions.fromDate;\r\n\t\t\tthis.codeMatcher = placesOrFnOrOptions.codeMatcher;\r\n\t\t\tthis.province = placesOrFnOrOptions.province;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Invalid initialized, retriver functio, array of places or BelfioreConnector instance needed as first parameter\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.fromDate = this.fromDate || options?.fromDate;\r\n\t\tthis.toDate = this.toDate || options?.toDate;\r\n\t\tthis.codeMatcher = this.codeMatcher || options?.codeMatcher;\r\n\t\tthis.province = this.province || options?.province;\r\n\r\n\t\tif (placesCache) {\r\n\t\t\tconst filteredPlaces = this.filterByParams([...placesCache], {\r\n\t\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\t\tprovince: this.province,\r\n\t\t\t\tfromDate: this.fromDate,\r\n\t\t\t\ttoDate: this.toDate,\r\n\t\t\t});\r\n\t\t\tthis.placesCache = Object.freeze(filteredPlaces);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return belfiore places list\r\n\t */\r\n\tpublic async toArray(): Promise<BelfiorePlace[]> {\r\n\t\treturn (await this.getPlaces()).map((place) => ({\r\n\t\t\t...place,\r\n\t\t})) as BelfiorePlace[];\r\n\t}\r\n\r\n\tpublic get provinces(): Promise<string[]> {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tif (this.province) {\r\n\t\t\t\tresolve([this.province]);\r\n\t\t\t} else if (this.codeMatcher !== this.COUNTRY_CODE_MATCHER) {\r\n\t\t\t\tthis.parseProvinces().then(resolve);\r\n\t\t\t} else {\r\n\t\t\t\tresolve([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @description Search places matching given name\r\n\t */\r\n\tpublic async searchByName(name: string): Promise<BelfiorePlace[] | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(name, \"i\");\r\n\r\n\t\treturn (await this.getPlaces()).filter((place) =>\r\n\t\t\tnameMatcher.test(place.name)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Find place matching given name, retuns place object if provided name match only 1 result\r\n\t */\r\n\tpublic async findByName(name: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!name || typeof name !== \"string\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst nameMatcher = new RegExp(`^${name}$`, \"i\");\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find((place) => nameMatcher.test(place.name)) ||\r\n\t\t\tnull\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @description Retrieve Place by Belfiore Code\r\n\t */\r\n\tpublic async findByCode(belfioreCode: string): Promise<BelfiorePlace | null> {\r\n\t\tif (!this.BELFIORE_CODE_MATCHER.test(belfioreCode)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst lcBelfioreCode = belfioreCode.toUpperCase();\r\n\t\treturn (\r\n\t\t\t(await this.getPlaces()).find(\r\n\t\t\t\t(place) => lcBelfioreCode === place?.belfioreCode?.toUpperCase()\r\n\t\t\t) || null\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic active = (date: MultiFormatDate = moment()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: moment(date),\r\n\t\t\ttoDate: moment(date),\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by given date ahead\r\n\t * @param date Target date to filter places active only for the given date\r\n\t * @returns Belfiore instance filtered by active date\r\n\t * @public\r\n\t */\r\n\tpublic from = (date: MultiFormatDate = moment()): BelfioreConnector =>\r\n\t\tnew BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.codeMatcher,\r\n\t\t\tprovince: this.province,\r\n\t\t\tfromDate: moment(date),\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\r\n\t/**\r\n\t * Returns a Belfiore instance filtered by the given province\r\n\t * @param code Province Code (2 A-Z char)\r\n\t * @returns Belfiore instance filtered by province code\r\n\t * @public\r\n\t */\r\n\tpublic byProvince = (code: string): BelfioreConnector | undefined => {\r\n\t\tif (typeof code !== \"string\" || !/^[A-Z]{2}$/u.test(code)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: undefined,\r\n\t\t\tprovince: code,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get cities(): BelfioreConnector | undefined {\r\n\t\tif (this.codeMatcher && this.codeMatcher !== this.CITY_CODE_MATCHER) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.CITY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Proxied version of Belfiore which filters results by place type\r\n\t */\r\n\tpublic get countries(): BelfioreConnector | undefined {\r\n\t\tif (\r\n\t\t\t(this.codeMatcher && this.codeMatcher !== this.COUNTRY_CODE_MATCHER) ||\r\n\t\t\tthis.province\r\n\t\t) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn new BelfioreConnector({\r\n\t\t\tplacesRetrieverFn: this.placesRetrieverFn,\r\n\t\t\tplacesCache: this.placesCache,\r\n\t\t\tplaceExpirationDateTime: this.placeExpirationDateTime,\r\n\t\t\tlifeTimeSec: this.lifeTimeSec,\r\n\t\t\tcodeMatcher: this.COUNTRY_CODE_MATCHER,\r\n\t\t\tprovince: undefined,\r\n\t\t\tfromDate: this.fromDate,\r\n\t\t\ttoDate: this.toDate,\r\n\t\t} as any);\r\n\t}\r\n}\r\n"],"names":["BelfioreConnector","BelfioreAbstractConnector","placesRetrieverFn","placesCache","placeExpirationDateTime","lifeTimeSec","toDate","fromDate","codeMatcher","province","filterByParams","places","params","filteredPlaces","filter","belfioreCode","test","ucProvince","toUpperCase","creationDate","isSameOrAfter","expirationDate","isSameOrBefore","getPlaces","this","Date","getTime","allPlaces","isNaN","moment","add","Object","freeze","parseProvinces","Set","map","sort","Boolean","constructor","placesOrFnOrOptions","options","super","Error","Array","isArray","toArray","place","provinces","Promise","resolve","COUNTRY_CODE_MATCHER","then","searchByName","name","nameMatcher","RegExp","findByName","find","findByCode","BELFIORE_CODE_MATCHER","lcBelfioreCode","active","date","from","byProvince","code","undefined","cities","CITY_CODE_MATCHER","countries"],"mappings":"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"}